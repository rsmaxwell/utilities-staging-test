#!/bin/bash

set -x

url="https://server.rsmaxwell.co.uk/archiva/repository"

groupId="com.rsmaxwell.utilities"
artifactId="utilities-test"
packaging="jar"

utilities_artifactId="utilities"

#*****************************************************************
# Clean previous built jars
#*****************************************************************
rm -rf ./target/${artifactId}-*
result=$?
if [ ! $result == 0 ]; then
    echo "$0[${LINENO}]"
    echo "result = $result"
    exit 1
fi

#*****************************************************************
# Find the latest version of 'utilities'
#*****************************************************************
currentdir=$(pwd)
result=$?
if [ ! $result == 0 ]; then
    echo "$0[${LINENO}]"
    echo "result = $result"
    exit 1
fi

tempdir=$(mktemp -d -t "latest-XXXXXXXXXXXX")
result=$?
if [ ! $result == 0 ]; then
    echo "$0[${LINENO}]"
    echo "result = $result"
    exit 1
fi

cd ${tempdir}
result=$?
if [ ! $result == 0 ]; then
    echo "$0[${LINENO}]"
    echo "result = $result"
    exit 1
fi

cat << EOT > pom.xml
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>junk</groupId>
	<artifactId>junk</artifactId>
	<version>junk</version>

	<dependencies>
		<dependency>
			<groupId>${groupId}</groupId>
			<artifactId>${utilities_artifactId}</artifactId>
			<version>1</version>
		</dependency>
	</dependencies>

	<repositories>
		<repository>
			<id>internal</id>
			<url>https://server.rsmaxwell.co.uk/archiva/repository/internal</url>
			<releases>
				<updatePolicy>always</updatePolicy>
			</releases>
		</repository>
	</repositories>

</project>
EOT

mvn --batch-mode --log-file output.txt versions:use-latest-releases
result=$?
if [ ! ${result} == 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "----[ output.txt ]--------------------------"
    cat output.txt
    echo "----------------------------------------"
    exit 1
fi

while [ ! -f pom.xml ]; do sleep 1; done

echo "---[ pom.xml ]---------------------------------"
cat pom.xml
echo "-----------------------------------------------"

line=$(grep "<version>" pom.xml | head -n 2 | tail -n 1)
if [ ${#line} == 0 ]; then
    echo "Error: $0[${LINENO}]"
    exit 1
fi

regex="<version>(.*)</version>"
if [[ ! ${line} =~ ${regex} ]]; then
    echo "Error: $0[${LINENO}]"
    exit 1
fi

utilities_version="${BASH_REMATCH[1]}"
echo "utilities_version: ${utilities_version}"

cd ${currentdir}
result=$?
if [ ! $result == 0 ]; then
    echo "$0[${LINENO}]"
    echo "result = $result"
    exit 1
fi

rm -rf ${tempdir}
result=$?
if [ ! $result == 0 ]; then
    echo "$0[${LINENO}]"
    echo "result = $result"
    exit 1
fi

#*****************************************************************
# Replace tags in the source for the Version class
#*****************************************************************
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
    
find . -name "Version.java" | while read versionfile; do

    echo "Replacing tags in ${versionfile}"
    
    sed -i "s@<UTILITIES_TEST_VERSION>@${BUILD_ID}@g"     ${versionfile}
    sed -i "s@<BUILD_DATE>@${TIMESTAMP}@g"                ${versionfile}
    sed -i "s@<GIT_COMMIT>@${GIT_COMMIT}@g"               ${versionfile}
    sed -i "s@<GIT_BRANCH>@${GIT_BRANCH}@g"               ${versionfile}
    sed -i "s@<GIT_URL>@${GIT_URL}@g"                     ${versionfile}
    sed -i "s@<UTILITIES_VERSION>@${utilities_version}@g" ${versionfile}
done

#*****************************************************************
# Update the version
#*****************************************************************
mvn --batch-mode --log-file output.txt versions:set -DnewVersion=${BUILD_ID}
result=$?
if [ ! ${result} == 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "----[ output.txt ]--------------------------"
    cat output.txt
    echo "----------------------------------------"
    exit 1
fi

mvn --batch-mode --log-file output.txt versions:use-dep-version -DdepVersion=${utilities_version} -Dincludes=com.rsmaxwell.utilities:utilities
result=$?
if [ ! ${result} == 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "----[ output.txt ]--------------------------"
    cat output.txt
    echo "----------------------------------------"
    exit 1
fi

mvn --batch-mode --log-file output.txt versions:use-latest-releases
result=$?
if [ ! ${result} == 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "----[ output.txt ]--------------------------"
    cat output.txt
    echo "----------------------------------------"
    exit 1
fi
